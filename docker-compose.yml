version: '2'

services:
  rocketchat:
    image: rocketchat/rocket.chat:latest
    container_name: rocketchat    
    command: >
      bash -c
        "for i in `seq 1 30`; do
          node main.js &&
          s=$$? && break || s=$$?;
          echo \"Tried $$i times. Waiting 5 secs...\";
          sleep 5;
        done; (exit $$s)"
    restart: unless-stopped
    volumes:
      - ./uploads:/app/uploads
    environment:
      - PORT=3000
      - ROOT_URL=http://localhost:3000
      - MONGO_URL=mongodb://mongo:27017/rocketchat
      - MONGO_OPLOG_URL=mongodb://mongo:27017/local
      - CREATE_TOKENS_FOR_USERS=true
      - MAIL_URL=smtp://smtp.email
#       - HTTP_PROXY=http://proxy.domain.com
#       - HTTPS_PROXY=http://proxy.domain.com
    depends_on:
      - mongo
    ports:
      - 3000:3000
    labels:
      - "traefik.backend=rocketchat"
      - "traefik.frontend.rule=Host: your.domain.tld"

  mongo:
    image: mongo:4.0
    container_name: mongo
    restart: unless-stopped
    ports:
      - 27017:27017
    volumes:
     - ./data/db:/data/db
     #- ./data/dump:/dump
    command: mongod --smallfiles --oplogSize 128 --replSet rs0 --storageEngine=mmapv1
    labels:
      - "traefik.enable=false"

  # this container's job is just run the command to initialize the replica set.
  # it will run the command and remove himself (it will not stay running)
  mongo-init-replica:
    image: mongo:4.0
    command: >
      bash -c
        "for i in `seq 1 30`; do
          mongo mongo/rocketchat --eval \"
            rs.initiate({
              _id: 'rs0',
              members: [ { _id: 0, host: 'localhost:27017' } ]})\" &&
          s=$$? && break || s=$$?;
          echo \"Tried $$i times. Waiting 5 secs...\";
          sleep 5;
        done; (exit $$s)"
    depends_on:
      - mongo

  nginx: 
    image: nginx:latest
    container_name: nginx
    restart: always 
    logging:
      driver: json-file
      options:
        max-size: "1m"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./logs:/logs
    ports:
      - 80:80


  chathostAPIs:
    image: 'node:10.15.0'
    container_name: chathost
    restart: always
    working_dir: /usr/src
    command: [ 'node', 'index.js' ]
    depends_on:
      - mongo
    logging:
      driver: json-file
      options:
        max-size: 50m
    environment:
      - CHATHOST_PORT=2820
      - CHATHOST_LOGGING=console
      - CHATHOST_MONGO=mongodb://mongo:27017/chathost
    ports:
      - '2820:2820/tcp'
    volumes:
      - ./src:/usr/src
      - ./node_modules:/usr/src/node_modules
